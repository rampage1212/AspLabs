// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Net;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Controllers;
using Microsoft.AspNet.WebHooks.Properties;
using Newtonsoft.Json.Linq;

namespace Microsoft.AspNet.WebHooks
{
    /// <summary>
    /// Provides an <see cref="IWebHookReceiver"/> implementation which supports WebHooks generated by Trello. 
    /// Set the /<c>MS_WebHookReceiverSecret_Trello</c>/ application setting to the secrets defined in Trello.
    /// The corresponding WebHook URI is of the form '<c>https://&lt;host&gt;/api/webhooks/incoming/trello/{id}</c>'.
    /// For details about Trello WebHooks, see <c>https://trello.com/docs/gettingstarted/webhooks.html</c>.
    /// </summary>
    public class TrelloWebHookReceiver : WebHookReceiver
    {
        internal const string ReceiverName = "trello";
        internal const int SecretMinLength = 32;
        internal const int SecretMaxLength = 128;

        internal const string DefaultAction = "change";
        internal const string SignatureHeaderName = "x-trello-webhook";

        /// <inheritdoc />
        public override string Name
        {
            get { return ReceiverName; }
        }

        /// <inheritdoc />
        public override async Task<HttpResponseMessage> ReceiveAsync(string id, HttpRequestContext context, HttpRequestMessage request)
        {
            if (id == null)
            {
                throw new ArgumentNullException("id");
            }
            if (context == null)
            {
                throw new ArgumentNullException("context");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }

            if (request.Method == HttpMethod.Post)
            {
                bool valid = await VerifySignature(request, id);
                if (!valid)
                {
                    return CreateBadSignatureResponse(request, SignatureHeaderName);
                }

                // Read the request entity body
                JObject data = await ReadAsJsonAsync(request);

                // Call registered handlers
                return await ExecuteWebHookAsync(id, context, request, new string[] { DefaultAction }, data);
            }
            else if (request.Method == HttpMethod.Head)
            {
                return await WebHookVerification(request, id);
            }
            else
            {
                return CreateBadMethodResponse(request);
            }
        }

        /// <summary>
        /// Verifies that the signature header matches that of the actual body.
        /// </summary>
        protected virtual async Task<bool> VerifySignature(HttpRequestMessage request, string id)
        {
            string secretKey = await GetReceiverConfig(request, Name, id, SecretMinLength, SecretMaxLength);

            // Get the expected hash from the signature header
            string signatureHeaderValue = GetRequestHeader(request, SignatureHeaderName);

            byte[] expectedHash;
            try
            {
                expectedHash = EncodingUtilities.FromBase64(signatureHeaderValue);
            }
            catch (Exception ex)
            {
                string msg = string.Format(CultureInfo.CurrentCulture, TrelloResources.Receiver_BadHeaderEncoding, SignatureHeaderName);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(msg, ex);
                HttpResponseMessage invalidEncoding = request.CreateErrorResponse(HttpStatusCode.BadRequest, msg);
                throw new HttpResponseException(invalidEncoding);
            }

            // Get the actual hash of the request body concatenated with the request URI
            byte[] actualHash;
            byte[] secret = Encoding.UTF8.GetBytes(secretKey);
            using (var hasher = new HMACSHA1(secret))
            {
                byte[] data = await request.Content.ReadAsByteArrayAsync();
                byte[] requestUri = Encoding.UTF8.GetBytes(request.RequestUri.AbsoluteUri);
                byte[] combo = new byte[data.Length + requestUri.Length];
                Buffer.BlockCopy(data, 0, combo, 0, data.Length);
                Buffer.BlockCopy(requestUri, 0, combo, data.Length, requestUri.Length);
                actualHash = hasher.ComputeHash(combo);
            }

            // Now verify that the provided hash matches the expected hash.
            return WebHookReceiver.SecretEqual(expectedHash, actualHash);
        }

        /// <summary>
        /// Creates a response to a WebHook verification GET request.
        /// </summary>
        [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "Disposed by caller")]
        protected async Task<HttpResponseMessage> WebHookVerification(HttpRequestMessage request, string id)
        {
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }

            // Verify that we have the secret as an app setting
            await GetReceiverConfig(request, Name, id, SecretMinLength, SecretMaxLength);

            // No other validation
            return request.CreateResponse();
        }
    }
}
