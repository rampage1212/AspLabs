// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Net;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Web.Http;
using System.Web.Http.Controllers;
using Microsoft.AspNet.WebHooks.Properties;
using Newtonsoft.Json.Linq;

namespace Microsoft.AspNet.WebHooks
{
    /// <summary>
    /// Provides an <see cref="IWebHookReceiver"/> implementation which supports WebHooks generated by Pusher. 
    /// The '<c>MS_WebHookReceiverSecret_Pusher</c>' application setting contains a comma separated list of values 
    /// of the form '<c>appKey_appSecret</c>' containing one or more application key/secret pairs defined in Pusher. An example
    /// with two key/secret pairs is '<c>47e5a8cd8f6bb492252a_42fef23870926753d345, ba3af8f38f3be37d476a_9eb6d047bb5465a43cb2</c>'.
    /// The corresponding WebHook URI is of the form '<c>https://&lt;host&gt;/api/webhooks/incoming/pusher</c>'.
    /// For details about Pusher WebHooks, see <c>https://pusher.com/docs/webhooks</c>.
    /// </summary>
    public class PusherWebHookReceiver : WebHookReceiver
    {
        internal const string SecretKey = "MS_WebHookReceiverSecret_Pusher";

        internal const string SignatureHeaderName = "X-Pusher-Signature";
        internal const string KeyHeaderName = "X-Pusher-Key";

        private static readonly string[] ReceiverNames = new string[] { "pusher" };

        private IDictionary<string, string> _secretLookupTable;

        /// <inheritdoc />
        public override IEnumerable<string> Names
        {
            get { return ReceiverNames; }
        }

        /// <inheritdoc />
        public override async Task<HttpResponseMessage> ReceiveAsync(string receiver, HttpRequestContext context, HttpRequestMessage request)
        {
            if (receiver == null)
            {
                throw new ArgumentNullException("receiver");
            }
            if (context == null)
            {
                throw new ArgumentNullException("context");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }

            if (request.Method == HttpMethod.Post)
            {
                bool valid = await VerifySignature(request);
                if (!valid)
                {
                    return CreateBadSignatureResponse(request, SignatureHeaderName);
                }

                // Get the pusher event notification data
                PusherNotification notification = await GetPusherNotification(request);

                // Call registered handlers
                return await ExecuteWebHookAsync(receiver, context, request, notification.Events.Keys, notification);
            }
            else
            {
                return CreateBadMethodResponse(request);
            }
        }

        /// <summary>
        /// Verifies that the signature header matches that of the actual body.
        /// </summary>
        protected virtual async Task<bool> VerifySignature(HttpRequestMessage request)
        {
            // Get the expected hash from the signature and app key headers
            string signatureHeaderValue = GetRequestHeader(request, SignatureHeaderName);
            string keyHeaderValue = GetRequestHeader(request, KeyHeaderName);

            // Lookup which secret to use based on key header value
            IDictionary<string, string> lookupTable = GetSecretLookupTable(request);
            string secretKey;
            if (!lookupTable.TryGetValue(keyHeaderValue, out secretKey))
            {
                string msg = string.Format(CultureInfo.CurrentCulture, PusherReceiverResources.Receiver_SecretNotFound, KeyHeaderName, keyHeaderValue);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(msg);
                HttpResponseMessage invalidEncoding = request.CreateErrorResponse(HttpStatusCode.BadRequest, msg);
                throw new HttpResponseException(invalidEncoding);
            }

            byte[] expectedHash;
            try
            {
                expectedHash = EncodingUtilities.FromHex(signatureHeaderValue);
            }
            catch (Exception ex)
            {
                string msg = string.Format(CultureInfo.CurrentCulture, PusherReceiverResources.Receiver_BadHeaderEncoding, SignatureHeaderName);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(msg, ex);
                HttpResponseMessage invalidEncoding = request.CreateErrorResponse(HttpStatusCode.BadRequest, msg);
                throw new HttpResponseException(invalidEncoding);
            }

            // Get the actual hash of the request body
            byte[] actualHash;
            byte[] secret = Encoding.UTF8.GetBytes(secretKey);
            using (var hasher = new HMACSHA256(secret))
            {
                byte[] data = await request.Content.ReadAsByteArrayAsync();
                actualHash = hasher.ComputeHash(data);
            }

            // Now verify that the provided hash matches the expected hash.
            return WebHookReceiver.SecretEqual(expectedHash, actualHash);
        }

        /// <summary>
        /// Gets the set of tuples containing application key and secret which are used to verify the 
        /// validity of an incoming WebHook request.
        /// </summary>
        /// <param name="request">The current <see cref="HttpRequestMessage"/>.</param>
        /// <returns>A look table which allows the application secret to be looked up from a given application key.</returns>
        [SuppressMessage("Microsoft.Reliability", "CA2000:Dispose objects before losing scope", Justification = "Disposed by Web API")]
        protected virtual IDictionary<string, string> GetSecretLookupTable(HttpRequestMessage request)
        {
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }

            if (_secretLookupTable != null)
            {
                return _secretLookupTable;
            }

            string keySecretPairs = GetWebHookSecret(request, SecretKey, 8, 256);

            IDictionary<string, string> lookupTable = new Dictionary<string, string>();
            foreach (string keySecretPair in keySecretPairs.SplitAndTrim(','))
            {
                string[] parts = keySecretPair.SplitAndTrim('_');
                if (parts == null || parts.Length != 2)
                {
                    string msg = string.Format(CultureInfo.CurrentCulture, PusherReceiverResources.Recevier_BadSecret, SecretKey);
                    request.GetConfiguration().DependencyResolver.GetLogger().Error(msg);
                    HttpResponseMessage invalidSecret = request.CreateErrorResponse(HttpStatusCode.BadRequest, msg);
                    throw new HttpResponseException(invalidSecret);
                }
                lookupTable.Add(parts[0], parts[1]);
            }

            if (lookupTable.Count == 0)
            {
                string msg = string.Format(CultureInfo.CurrentCulture, PusherReceiverResources.Receiver_NoSecrets, SecretKey, typeof(PusherWebHookReceiver).Name);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(msg);
                HttpResponseMessage invalidSecret = request.CreateErrorResponse(HttpStatusCode.BadRequest, msg);
                throw new HttpResponseException(invalidSecret);
            }

            Interlocked.CompareExchange(ref _secretLookupTable, lookupTable, null);
            return _secretLookupTable;
        }

        /// <summary>
        /// Creates a <see cref="PusherNotification"/> and determines the actions included in the data received from a
        /// Pusher WebHook.
        /// </summary>
        /// <param name="request">The current <see cref="HttpRequestMessage"/>.</param>
        /// <returns>An initialized <see cref="PusherNotification"/> instance.</returns>
        protected virtual async Task<PusherNotification> GetPusherNotification(HttpRequestMessage request)
        {
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }

            JObject data = await ReadAsJsonAsync(request);

            try
            {
                PusherNotification notification = new PusherNotification(data);
                return notification;
            }
            catch (Exception ex)
            {
                string msg = string.Format(PusherReceiverResources.Receiver_BadEvent, ex.Message);
                request.GetConfiguration().DependencyResolver.GetLogger().Error(msg, ex);
                HttpResponseMessage invalidData = request.CreateErrorResponse(HttpStatusCode.BadRequest, msg);
                throw new HttpResponseException(invalidData);
            }
        }
    }
}
