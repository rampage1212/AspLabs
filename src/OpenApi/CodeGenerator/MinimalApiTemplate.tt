<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="mscorlib" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

<#
    foreach (var path in FileProperties) {
        Path = path.Key;
        foreach (var operation in FileProperties[Path]) {
            Method = operation.Key;

            ParametersList = operation.Value["parameters"];

            if (ParametersList != String.Empty) {
                ParametersList = ", " + ParametersList;
            }
#>
app.<#=Method #>("<#=Path #>", (HttpContext context<#=ParametersList #>) =>
{
<#
            foreach (var response in operation.Value) {

                if (response.Key != "parameters") {
                    StatusCode = response.Key;
                    if (response.Value == "Default") {
                        var statusMethod = StatusCode switch {
                        "202" => "Accepted()",
                        "400" => "BadRequest()",
                        "409" => "Conflict()",
                        "204" => "NoContent()",
                        "404" => "NotFound()",
                        "200" => "Ok()",
                        "401" => "Unauthorized()",
                        "422" => "UnprocessableEntity()",
                        _ => $"StatusCode({response.Key})"
                        };
                        ReturnValue = $"Results.{statusMethod}";
                    }
                    else {
                        var statusMethod = StatusCode switch {
                        "202" => $"Accepted(_, {response.Value})",
                        "400" => $"BadRequest({response.Value})",
                        "409" => $"Conflict({response.Value})",
                        "204" => "NoContent()",
                        "404" => $"NotFound({response.Value})",
                        "200" => $"Ok({response.Value})",
                        "401" => "Unauthorized()",
                        "422" => $"UnprocessableEntity({response.Value})",
                        _ => $"StatusCode({response.Key})"
                        };
                        ReturnValue = $"Results.{statusMethod}";
                    }
                    
                }
                else {
                    continue;
                }
#>
    if (context.Request.Headers["AcceptStatusCode"] == "<#=StatusCode #>")
    {
        return <#=ReturnValue #>;
    }

<#
            }
#>
    return null;
});

<#
        }
    }
#>

<#
    foreach (var schema in Schemas) {
        UserObject = schema.Key;
#>
public class <#=UserObject #> {
<#
        string constructorParameters = string.Empty;
        string constructorBody = string.Empty;
        foreach (var property in schema.Value) {
            PropertyName = property.Key;
            PropertyType = property.Value;
            constructorParameters += PropertyType + "? " + PropertyName + ", ";
            constructorBody += $"this.{PropertyName} = {PropertyName}\n";
#>
    public <#=PropertyType #>? <#=PropertyName #> { get; set; }
<#
        }
        ConstructorParameters = constructorParameters.Substring(0, constructorParameters.Length - 2);
        constructorBody = constructorBody.Substring(0, constructorBody.Length - 1);
#>
    public <#=UserObject #>(<#=ConstructorParameters #>) {
<#
    var statements = constructorBody.Split("\n");
    foreach (var statement in statements) {
        ConstructorBody = statement;
#>
       <#=ConstructorBody #>;
<#
    }
#>
    }
    public <#=UserObject #>() {}
}
<#
    }
#>

<#+
    public Dictionary<string, Dictionary<string, Dictionary<string, string>>> FileProperties { get; set; }
    public string Path { get; set; }
    public string Method { get; set; }
    public string ReturnValue { get; set; }
    public string ParametersList { get; set; }
    public string StatusCode { get; set; }
    public Dictionary<string, Dictionary<string, string>> Schemas { get; set; }
    public string UserObject { get; set; }
    public string PropertyName { get; set; }
    public string PropertyType { get; set; }
    public string ConstructorParameters { get; set; }
    public string ConstructorBody { get; set; }
#>
